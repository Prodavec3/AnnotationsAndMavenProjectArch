Основные правила:
1) Каждый тестовый сценарий (test case) - отдельный метод
Методы необходимо помечать аннотацией @Test
2) Существуют вспомогательные методы с аннотациями @Before, @BeforeClass, @After, @AfterClass
3) Тестовый класс необходимо называть с суффиксом Test (Vector2DTest)
4) Тестовые методы желательно должны содержать "should" в названии (sumShouldBePositive)

Аннотация @Test
Объявляет метод (обязательно public void) тестовым.

Аннотация @Test может использовать параметры:
 - expected - код в тесте проверяется на генерацию определенного исключения
 - timeout - код в тесте должен работать не более указанного времени (иначе тест завален)

Класс Assert в библиотеке.
Проверка "ожидание/реальность" (expected/actual)
Методы:
assetTrue()
assertFalse()
assertEquals() фактический результат == ожидаемому результату
assertArrayEquals() (то же что и выше, только для массивов)
assertNotEquals()
assertSame()
assertNotSame()
Все эти методы являются статическими

fail() - тестовый сценарий гарантированно падает


Ignore и Assume

Тест, помеченный @Ignore не выполняется. Лучше это не использовать. Т.к можно забыть и баг останется в системе.

Вместо Assert можно использовать Assume (с методами assumeFalse, assumeEquals() и др)
Если проверка верна - тест пройден, а если неверна - тест игнорируется.
А в случае Assert при неверном - тест валится.

Вспомогательные методы.
@B* Необходимы для подготавливания тестового окружения (записывать данные в БД, создавать объекты и тд)
@BeforeClass - запускается только 1 раз при запуске теста (static).
@Before - запускается перед каждым тестовым методом.

@After - запускается после каждого метода
@AfterClass - запускается после того как отработали все тестовые методы (static)


Жизненный цикл тестирующего класса
- @BeforeClass
- Для каждого @Test - метода:
    - создание экземпляра тестового класса
    - @Before
    - @Test
    - @After
- @AfterClass

То есть даже если мы тестируем 1 метод - создается тестовый объект класса. Следует учитывать.
@B/A Class запускается 1 раз для класса.