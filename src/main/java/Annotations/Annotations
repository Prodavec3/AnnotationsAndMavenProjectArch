Java Аннотации - специальный тип комментариев в коде, с помощью которых можно:
    - передавать какие-либо инструкции для компилятора java
    - передавать какие-либо инструкции для анализаторов исходного кода
    (например, инструменты, которые генерируют документацию из исходного кода)
    - передавать метаданные, которые могут быть использоны либо Java приложением (с помощью рефлексии),
    либо другими приложениями или фреймворками (например Spring Framework)

Метаданные: это - данные о данных
                - не влияют на непосредственную работу программы, но могут быть выявлены другими программами
                на этапе компилирования или разработки, которые при этом скорректируют свою работу
Например, тег <meta> в HTML, который используется для хранения инфо о странице;
          аннотации в Java, которые дают дополнительную информацию о коде.

В Java можно создавать свои аннотации.

Могут быть аннотированы класс, метод, параметр, поле и др.
В Java уже есть встроенные аннотации, которые чаще всего использются (@Override, @Deprecated, @SuppressWarnings)

@Override - переопределяем метод и если изменилось название у исходного - данная аннотация выдаст ошибку
@Deprecated - какой-то метод устарел и его лучше не использовать (зачеркнутый будет там где используется в коде)
не запрещает использовать, работать будет
@SuppressWarning - убирает предупреждения из консоли по данному методу


Создание своих аннотаций.
Зачем создавать свои аннотации? Это не так часто пригождается, но знать полезно.

    - Если мы реализуем анализатор исходного кода. Можем создать свои аннотации чтобы их можно было использовать
    в коде и тем самым передавать дополнительную информацию об этом коде (те самые метаданные)
    - Если мы реализуем свою библиотеку или фреймворк. можем создать свои аннотации чтобы пользователь
    с помощью них взаимодействовал с нашей библиотекой или фреймворком.
В этом сценарии активно используется рефлексия.

Создание и использование.
Самая простая схема создания
public @interface MyAnnotation{}
И использование
@MyAnnotation
public class Test{}

Поля (элементы) аннотаций объявляются как методы:
public @interface Author {
    String name();
    int dateOfBirth();
}
Но используются как поля:
@Author(name = "SKing", dateOfBirth = 1947)
public class Test{}

Полям можно завадавать значение по-умолчанию
public @interface Author {
    String name() default "Some name"
    int dateOfBirth() default 2000;
}

Если не указываем значение для поля, оно будет по-умолчанию
@Author()
public class Test{}


В Java есть аннотации аннотирующие аннотации
лежат в java.lang.annotation

    - @Target - указывает к чему может быть применена аннотация. Значения берутся из перечисления (enum)
    ElementType (из того же пакета)
        FIELD - поле
        METHOD - метод
        TYPE - класс, интерфейс, перечисление
    - @Retention - политика удержания аннотации (до какого этапа компилирования или выполнения
    аннотация видна). Значения лежат в перечислении RetentionPolice:
        SOURCE - отбрасываются при компиляции. Видты только в самом исходном коде (пододйет для
        анализаторов исходного кода)
        CLASS - сохраняются в байт-коде, но недоступны во время работы программы
        RUNTIME - сохраняются в байт-коде и доступны во время работы программы (с помощью рефлексии)